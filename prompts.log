PROMPT 1:
The lua API currently supplies a function xterm.terminal.write. Implement a similar function called xterm.terminal.message, which writes a new line into the terminal, instead of sending the text to the current shell.

PROMPT 2:
The xterm.terminal.message function types the message into the current shell, which is wrong. Instead, it should write a new line directly to the terminal output, and then start a new shell input line below.

PROMPT 3:
After xterm.terminal.message finishes, the shell prompt should be displayed again.

PROMPT 4:
Add all past prompts to a file prompts.log

PROMPT 5:
The shell prompt still does not display after using xterm.terminal.message.

PROMPT 6:
The API function xterm.terminal.message currently writes the message to a new line in the terminal. Instead it should show the message on lines from the bottom of the screen, and block input until the user presses the escape key. When the escape key is pressed, The message lines should be hidden, and normal operation resumed.

PROMPT 7:
Add an a function to the Lua API which returns the currently displayed text of in the terminal.

PROMPT 8:
Upon startup, the application should load a file from trex_runtime/trex.lua in the current directory. In that file, it should be possible to import other files. All imports should be relative the runtime directory.

PROMPT 9:
Rename trex_runtime to runtime.

PROMPT 10:
Why does the custom require function not use package.path?

PROMPT 11:
yes.

PROMPT 12:
Remove custom require implementation entirely. Use package.path to load trex.lua on startup

PROMPT 13:
Remove restrictions of dofile and loadfile

PROMPT 14:
Add the current working directory to package.path by dafault.

PROMPT 15:
Rename the binary from xterm to trex

PROMPT 16:
Add $HOME/.local/share/xterm as an alternative directory for runtime files.

PROMPT 17:
Currently, the lua extensibility is added directly in several files in the project. We should break out the extension API, and move the lua functionality into a new directory called plugins/lua, where we use the extension API.

Summary: Successfully refactored Lua extensibility into a modular plugin system. Created extension API framework with plugins/lua directory containing Lua-specific implementation. Fixed linking errors by correcting include paths and object file locations. Updated Makefile.in with explicit compilation rules for plugin subdirectories and proper clean rules. Build system now works automatically without manual file movement - clean builds work perfectly.